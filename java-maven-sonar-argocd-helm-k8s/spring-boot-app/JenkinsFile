pipeline {
    agent any

    tools {
        maven 'Maven 3.6.3' // Replace 'Maven 3.6.3' with the name of your Maven installation in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Update the branch and URL as necessary
                git branch: 'main', url: 'https://github.com/test-org-223234/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'

                // Navigate to the directory containing your Maven project
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    // Clean and package the project using Maven
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://13.201.186.89:9000" // Replace with your SonarQube server URL
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    // Navigate to the directory containing your Maven project
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        // Run SonarQube analysis
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL'
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "savage313/ultimate-cicd:${BUILD_NUMBER}"
                // Replace 'docker' with the ID of your Docker registry credentials in Jenkins
                REGISTRY_CREDENTIALS = credentials('docker')
            }
            steps {
                script {
                    // Navigate to the directory containing the Dockerfile
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        // Build the Docker image
                        sh 'docker build -t ${DOCKER_IMAGE} .'
                    }
                    // Create a Docker image object
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    // Push the Docker image to the registry
                    docker.withRegistry('https://index.docker.io/v1/', "docker") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                GIT_USER_NAME = "test-org-223234"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "rabi@breakway.net"
                        git config user.name "Rabi"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
